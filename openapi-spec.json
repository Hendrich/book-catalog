{
  "openapi": "3.0.3",
  "info": {
    "title": "Book Catalog API",
    "description": "A secure Book Catalog API built with Node.js and Express, featuring JWT authentication via Supabase and CRUD operations for books management.",
    "version": "1.0.0",
    "contact": {
      "name": "Hendri Christianto",
      "email": "hendri.christianto24@gmail.com"
    }
  },
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Local development server"
    },
    {
      "url": "https://book-catalog-app-z8p8.onrender.com",
      "description": "Production server on Render"
    }
  ],
  "security": [
    {
      "BearerAuth": []
    }
  ],
  "paths": {
    "/api/books": {
      "get": {
        "summary": "Get all books",
        "description": "Retrieve all books belonging to the authenticated user",
        "tags": ["Books"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "List of books retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Book"
                  }
                },
                "example": [
                  {
                    "id": 14,
                    "title": "buku menari",
                    "author": "jojo",
                    "user_id": "cd004999d-7d4b-4167-a9af-0f15783caee5"
                  },
                  {
                    "id": 15,
                    "title": "buku mewarnai",
                    "author": "santi",
                    "user_id": "cd004999d-7d4b-4167-a9af-0f15783caee5"
                  }
                ]
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "post": {
        "summary": "Add a new book",
        "description": "Create a new book entry for the authenticated user",
        "tags": ["Books"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookInput"
              },
              "example": {
                "title": "Atomic Habits",
                "author": "James Clear"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Book created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                },
                "example": {
                  "id": 25,
                  "title": "Atomic Habits",
                  "author": "James Clear",
                  "user_id": "cd004999d-7d4b-4167-a9af-0f15783caee5"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing required fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Title and author are required"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/api/books/{id}": {
      "put": {
        "summary": "Update a book",
        "description": "Update an existing book (user can only update their own books)",
        "tags": ["Books"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Book ID",
            "schema": {
              "type": "integer",
              "example": 14
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BookInput"
              },
              "example": {
                "title": "Atomic Habits Updated",
                "author": "J. Clear"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Book updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Book"
                },
                "example": {
                  "id": 14,
                  "title": "Atomic Habits Updated",
                  "author": "J. Clear",
                  "user_id": "cd004999d-7d4b-4167-a9af-0f15783caee5"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - missing required fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "All fields are required"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Book not found or unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Book not found or unauthorized"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      },
      "delete": {
        "summary": "Delete a book",
        "description": "Delete an existing book (user can only delete their own books)",
        "tags": ["Books"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Book ID",
            "schema": {
              "type": "integer",
              "example": 14
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Book deleted successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessMessage"
                },
                "example": {
                  "message": "Book deleted successfully"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/UnauthorizedError"
          },
          "404": {
            "description": "Book not found or unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "example": {
                  "message": "Book not found or unauthorized"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/responses/ServerError"
          }
        }
      }
    },
    "/auth/v1/signup": {
      "post": {
        "summary": "Register new user",
        "description": "Register a new user account via Supabase authentication",
        "tags": ["Authentication"],
        "parameters": [
          {
            "name": "grant_type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["password"]
            }
          },
          {
            "name": "apikey",
            "in": "query",
            "required": true,
            "description": "Supabase anon key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthCredentials"
              },
              "example": {
                "email": "user@example.com",
                "password": "yourpassword"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User registered successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request - validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/v1/token": {
      "post": {
        "summary": "Login user",
        "description": "Authenticate user and receive JWT token via Supabase",
        "tags": ["Authentication"],
        "parameters": [
          {
            "name": "grant_type",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": ["password"]
            }
          },
          {
            "name": "apikey",
            "in": "query",
            "required": true,
            "description": "Supabase anon key",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthCredentials"
              },
              "example": {
                "email": "user@example.com",
                "password": "yourpassword"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Authentication successful",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                },
                "example": {
                  "access_token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                  "token_type": "bearer",
                  "expires_in": 3600,
                  "refresh_token": "refresh_token_here",
                  "user": {
                    "id": "cd004999d-7d4b-4167-a9af-0f15783caee5",
                    "email": "user@example.com"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid credentials",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "JWT token obtained from Supabase authentication"
      }
    },
    "schemas": {
      "Book": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique identifier for the book",
            "example": 14
          },
          "title": {
            "type": "string",
            "description": "Title of the book",
            "example": "Atomic Habits"
          },
          "author": {
            "type": "string",
            "description": "Author of the book",
            "example": "James Clear"
          },
          "user_id": {
            "type": "string",
            "format": "uuid",
            "description": "ID of the user who owns this book",
            "example": "cd004999d-7d4b-4167-a9af-0f15783caee5"
          }
        },
        "required": ["id", "title", "author", "user_id"]
      },
      "BookInput": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "Title of the book",
            "example": "Atomic Habits"
          },
          "author": {
            "type": "string",
            "description": "Author of the book",
            "example": "James Clear"
          }
        },
        "required": ["title", "author"]
      },
      "AuthCredentials": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "description": "User email address",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "description": "User password",
            "example": "yourpassword"
          }
        },
        "required": ["email", "password"]
      },
      "AuthResponse": {
        "type": "object",
        "properties": {
          "access_token": {
            "type": "string",
            "description": "JWT access token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "token_type": {
            "type": "string",
            "example": "bearer"
          },
          "expires_in": {
            "type": "integer",
            "description": "Token expiration time in seconds",
            "example": 3600
          },
          "refresh_token": {
            "type": "string",
            "description": "Refresh token for obtaining new access tokens"
          },
          "user": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "format": "uuid",
                "example": "cd004999d-7d4b-4167-a9af-0f15783caee5"
              },
              "email": {
                "type": "string",
                "format": "email",
                "example": "user@example.com"
              }
            }
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error message",
            "example": "An error occurred"
          },
          "error": {
            "type": "string",
            "description": "Detailed error information"
          }
        },
        "required": ["message"]
      },
      "SuccessMessage": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message",
            "example": "Operation completed successfully"
          }
        },
        "required": ["message"]
      }
    },
    "responses": {
      "UnauthorizedError": {
        "description": "Authentication information is missing or invalid",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "examples": {
              "no_token": {
                "summary": "No token provided",
                "value": {
                  "message": "No token provided"
                }
              },
              "invalid_token": {
                "summary": "Invalid token",
                "value": {
                  "message": "Invalid token"
                }
              }
            }
          }
        }
      },
      "ServerError": {
        "description": "Internal server error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            },
            "example": {
              "message": "Server error saat menambah buku",
              "error": "Database connection failed"
            }
          }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "Authentication endpoints using Supabase"
    },
    {
      "name": "Books",
      "description": "Book management endpoints (CRUD operations)"
    }
  ]
}
